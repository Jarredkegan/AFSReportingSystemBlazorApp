@using DataAccessLibrary;
@using DataAccessLibrary.Models.SanitationModels
@using DataAccessLibrary.Data.SanitationData.CardboardRequestData;
@using AFSReportingSystemBlazorApp.Models.SanitationDisplayModels;

@inject ICardboardRequestData _db
@inject NavigationManager NavigationManager

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Report a new spill</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <EditForm Model="@newRequest" OnValidSubmit="@InsertRequest">
                    <DataAnnotationsValidator />
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="department">
                                Dock Department:
                                <InputSelect id="department" @bind-Value="newRequest.Department">
                                    <option></option>
                                    <option>Grocery</option>
                                    <option>Perishable</option>
                                </InputSelect>
                            </label>
                        </div>
                        <div class="form-group col-md-6">
                            <label for="dock">
                                Dock:
                                <InputSelect id="dock" @bind-Value="newRequest.Dock">
                                    <option></option>
                                    @if (newRequest.Department == "Grocery")
                                    {
                                        <option>100</option>
                                        <option>500</option>
                                    }
                                    @if (newRequest.Department == "Perishable")
                                    {
                                        <option>200</option>
                                        <option>300</option>
                                        <option>400</option>
                                    }
                                </InputSelect>
                            </label>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-xl-auto">
                            <InputTextArea rows="5" columns="20" id="comments" @bind-Value="newRequest.Comments" placeholder="You can leave some info about the spill here or leave it blank" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Submit</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
                    </div>
                    <ValidationSummary />
                </EditForm>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {

    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    public bool IsOpen = false;

    //private List<SpillModel> spills;
    private DisplayCardboardRequestModel newRequest = new DisplayCardboardRequestModel();

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        IsOpen = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        IsOpen = false;
        StateHasChanged();
    }

    private async Task InsertRequest()
    {
        CardboardRequestModel request = new CardboardRequestModel
        {
            Department = newRequest.Department,
            Dock = newRequest.Dock,
            Comments = newRequest.Comments,
            Date = DateTime.Now,
            Complete = false
        };

        await _db.InsertRequest(request);

        newRequest = new DisplayCardboardRequestModel();

        Close();

        //force reload to refresh list
        NavigationManager.NavigateTo("/SanitationPage/SanitationMainPage", true);
    }
}