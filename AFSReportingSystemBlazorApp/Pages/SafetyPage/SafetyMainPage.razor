@page "/SafetyPage/SafetyMainPage"

@using DataAccessLibrary;
@using DataAccessLibrary.Models.SafetyModels;
@using DataAccessLibrary.Data.SafetyData;
@using DataAccessLibrary.Data.SafetyData.LooseProductData;


@using AFSReportingSystemBlazorApp.Models.SafetyDisplayModels;
@using AFSReportingSystemBlazorApp.Components.SafetyModalForms;

@inject IDangerousPalletData _dbDangerousPallet;
@inject ILooseProductData _dbLooseProduct;

@inject IJSRuntime JsRuntime;
@inject IToastService toastService;


@*Jumbotron header with form buttons*@
<div class="jumbotron">
    <h1 class="display-4">Safety</h1>
    <p class="lead">Quickly report dangerous things that need attention</p>
    <hr class="my-4">

    <button type="button" class="btn btn-primary btn-lg" @onclick="() => dangerousPalletModalForm.Open()">Dangerous Pallets</button>
    <DangerousPalletModalForm @ref="dangerousPalletModalForm"></DangerousPalletModalForm>

    <button type="button" class="btn btn-primary btn-lg" @onclick="() => looseProductModalForm.Open()">Loose Product</button>
    <LooseProductModalForm @ref="looseProductModalForm"></LooseProductModalForm>



</div>


@*Dangerous Pallet table*@
@if (reportsDangerousPallet is null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (reportsDangerousPallet.Count == 0)
    {
        <div class=" alert alert-dark">
            <h4 class="text-center">Dangerous Pallets Complete</h4>
        </div>
    }
    else
    {
        <hr class="my-4">
        @*<div class="p-1 mb-1 bg-dark text-white">*@
        <div>
            <h4 class="text-center">Dangerous Pallets</h4>
        </div>

        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Department</th>
                    <th>Slot</th>
                    <th>Comments</th>
                    <th>Date/Time</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var report in reportsDangerousPallet)
                {
                    <tr>
                        <td>@report.Department</td>
                        <td>@report.Slot</td>
                        <td>@report.Comments</td>
                        <td>@report.Date</td>
                        <td>
                            <div>
                                <button type="submit" class="btn btn-success" data-toggle="tooltip" data-placement="top" title="Only mark as complete if this report has been resolved" @onclick="@(() => CompleteDangerousPallet(report))">Complete</button>
                                @*<button type="submit" class="btn btn-warning" data-toggle="tooltip" data-placement="top" title="Make changes to this spill">Edit</button>*@
                                @*<button type="submit" class="btn btn-danger" data-toggle="tooltip" data-placement="top" title="Deleting this spill cannot be undone" @onclick="@(() => DeleteSpill(spill.Id))">Delete</button>*@
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    <hr class="my-4">
}

@*Loose Product table*@
@if (reportsLooseProduct is null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (reportsLooseProduct.Count == 0)
    {
        <div class=" alert alert-dark">
            <h4 class="text-center">Loose Product Complete</h4>
        </div>
    }
    else
    {
        <hr class="my-4">
        @*<div class="p-1 mb-1 bg-dark text-white">*@
        <div>
            <h4 class="text-center">Loose Product</h4>
        </div>

        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Department</th>
                    <th>Slot</th>
                    <th>Comments</th>
                    <th>Date/Time</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var report in reportsLooseProduct)
                {
                    <tr>
                        <td>@report.Department</td>
                        <td>@report.Slot</td>
                        <td>@report.Comments</td>
                        <td>@report.Date</td>
                        <td>
                            <div>
                                <button type="submit" class="btn btn-success" data-toggle="tooltip" data-placement="top" title="Only mark as complete if this report has been resolved" @onclick="@(() => CompleteLooseProduct(report))">Complete</button>
                                @*<button type="submit" class="btn btn-warning" data-toggle="tooltip" data-placement="top" title="Make changes to this spill">Edit</button>*@
                                @*<button type="submit" class="btn btn-danger" data-toggle="tooltip" data-placement="top" title="Deleting this spill cannot be undone" @onclick="@(() => DeleteSpill(spill.Id))">Delete</button>*@
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    <hr class="my-4">
}



@code {

    #region Modal Forms
    private DangerousPalletModalForm dangerousPalletModalForm { get; set; }
    private LooseProductModalForm looseProductModalForm { get; set; }
    #endregion

    #region Table Lists
    public List<DangerousPalletModel> reportsDangerousPallet;
    public List<LooseProductModel> reportsLooseProduct;
    #endregion

    #region Completed Models
    public DangerousPalletModel completeDangerousPallet;
    #endregion

    #region Display Models
    private DisplayDangerousPalletModel newReport = new DisplayDangerousPalletModel();
    private DisplayDangerousPalletModel deleteReport = new DisplayDangerousPalletModel();

    private DisplayLooseProductModel newReportLooseProduct = new DisplayLooseProductModel();
    private DisplayLooseProductModel deleteReportLooseProduct = new DisplayLooseProductModel();
    #endregion

    #region OnInitializedAsync
    protected override async Task OnInitializedAsync()
    {
        reportsDangerousPallet = await _dbDangerousPallet.GetActiveReports();
        reportsLooseProduct = await _dbLooseProduct.GetActiveReports();
    }
    #endregion

    #region Crud Methods - I feel like these belong somewhere else

    //should i move these to their components?

    /// <summary>
    /// Delete request from dbo.DangerousPallet
    /// </summary>
    /// <param name="Id"></param>
    /// <returns></returns>
    private async Task DeleteReport(int Id)
    {

        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this report? This action cannot be undone");

        if (confirmed)
        {

            await _dbDangerousPallet.DeleteReport(Id);

            //used to refresh new list
            await OnInitializedAsync();

            deleteReport = new DisplayDangerousPalletModel();
        }
        else
        {
            return;
        }
    }


    /// <summary>
    /// Complete Dangerous Pallet. Marks Complete as true
    /// </summary>
    /// <param name="Id"></param>
    /// <returns></returns>
    private async Task CompleteDangerousPallet(DangerousPalletModel report)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to mark this report as completed?");

        if (confirmed)
        {

            //Complete
            await _dbDangerousPallet.CompleteRackDamage(report);

            //used to refresh new list
            await OnInitializedAsync();

            deleteReport = new DisplayDangerousPalletModel();

            toastService.ShowSuccess("Report successfully completed", "Thank you!");

        }
        else
        {
            return;
        }

    }

    /// <summary>
    /// Complete Loose Product. Marks Complete as true
    /// </summary>
    /// <param name="Id"></param>
    /// <returns></returns>
    private async Task CompleteLooseProduct(LooseProductModel report)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to mark this report as completed?");

        if (confirmed)
        {

            //Complete
            await _dbLooseProduct.CompleteLooseProduct(report);

            //used to refresh new list
            await OnInitializedAsync();

            deleteReportLooseProduct = new DisplayLooseProductModel();

            toastService.ShowSuccess("Report successfully completed", "Thank you!");

        }
        else
        {
            return;
        }

    }


    #endregion
}
