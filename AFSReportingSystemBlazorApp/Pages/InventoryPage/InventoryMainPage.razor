@page "/InventoryPage/InventoryMainPage"

@using DataAccessLibrary
@using DataAccessLibrary.Models.InventoryModels
@using DataAccessLibrary.Data.InventoryData.OwnedByAnotherItemData


@using AFSReportingSystemBlazorApp.Models.InventoryDisplayModels
@using AFSReportingSystemBlazorApp.Components.InventoryModalForms

@inject IOwnedByAnotherItemData _db;
@inject IJSRuntime JsRuntime;
@inject IToastService toastService


@*Jumbotron header with form buttons*@
<div class="jumbotron">
    <h1 class="display-4">Inventory</h1>
    <p class="lead">Quickly make a report directly to inventory.</p>
    <hr class="my-4">

    <button type="button" class="btn btn-primary btn-lg" @onclick="() => OwnedByAnotherItemForm.Open()">Owned By Another Item</button>
    <OwnedByAnotherItemModalForm @ref="OwnedByAnotherItemForm"></OwnedByAnotherItemModalForm>

</div>


@*Owned By Another Item table*@
@if (reports is null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (reports.Count == 0)
    {
        <div class=" alert alert-dark">
            <h4 class="text-center">No reports at this time</h4>
        </div>
    }
    else
    {
        <hr class="my-4">
        @*<div class="p-1 mb-1 bg-dark text-white">*@
        <div>
            <h4 class="text-center">Owned By Another Item</h4>
        </div>

        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Department</th>
                    <th>Slot</th>
                    <th>Comments</th>
                    <th>Date/Time</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var report in reports)
                {
                    <tr>
                        <td>@report.Department</td>
                        <td>@report.Slot</td>
                        <td>@report.Comments</td>
                        <td>@report.Date</td>
                        <td>
                            <div>
                                <button type="submit" class="btn btn-success" data-toggle="tooltip" data-placement="top" title="Only mark as complete if this report has been resolved" @onclick="@(() => CompleteReport(report))">Complete</button>
                                @*<button type="submit" class="btn btn-warning" data-toggle="tooltip" data-placement="top" title="Make changes to this spill">Edit</button>*@
                                @*<button type="submit" class="btn btn-danger" data-toggle="tooltip" data-placement="top" title="Deleting this spill cannot be undone" @onclick="@(() => DeleteSpill(spill.Id))">Delete</button>*@
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    <hr class="my-4">
}

@if (submitionSuccessful)
{
    toastService.ShowSuccess("Your report has been submitted", "Thank you!");
    submitionSuccessful = false;
}


@code {

    [Parameter]
    public bool submitionSuccessful{ get; set; }

    #region Modal Forms
    private OwnedByAnotherItemModalForm OwnedByAnotherItemForm { get; set; }
    #endregion

    #region Table Lists
    public List<OwnedByAnotherItemModel> reports;
    public OwnedByAnotherItemModel completedSpill;

    #endregion

    #region Display Models
    private DisplayOwnedByAnotherItemModel newReport = new DisplayOwnedByAnotherItemModel();
    private DisplayOwnedByAnotherItemModel deleteReport = new DisplayOwnedByAnotherItemModel();
    #endregion

    #region OnInitializedAsync
    protected override async Task OnInitializedAsync()
    {
        reports = await _db.GetActiveReports();

    }
    #endregion

    #region Crud Methods - I feel like these belong somewhere else

    //should i move these to their components?

    /// <summary>
    /// Delete request from dbo.OwnedByAnotherItem
    /// </summary>
    /// <param name="Id"></param>
    /// <returns></returns>
    private async Task DeleteReport(int Id)
    {

        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this request? This action cannot be undone");

        if (confirmed)
        {

            await _db.DeleteReport(Id);

            //used to refresh new list
            await OnInitializedAsync();

            deleteReport = new DisplayOwnedByAnotherItemModel();
        }
        else
        {
            return;
        }
    }


    /// <summary>
    /// Complete Aisle Spill. Moves the spill to dbo.CompletedOwnedByAnotherItem
    /// and deletes then from dbo.OwnedByAnotherItem
    /// </summary>
    /// <param name="Id"></param>
    /// <returns></returns>
    private async Task CompleteReport(OwnedByAnotherItemModel report)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to mark this request as completed?");

        if (confirmed)
        {

            //Complete - Move to dbo.CompletedOwnedByAnotherItem and then deletes from dbo.OwnedByAnotherItem
            await _db.CompleteOwnedByAnotherItemReport(report);

            //used to refresh new list
            await OnInitializedAsync();

            deleteReport = new DisplayOwnedByAnotherItemModel();

            toastService.ShowSuccess("Report successfully completed", "Thank you!");

        }
        else
        {
            return;
        }

    }

    #endregion
}
